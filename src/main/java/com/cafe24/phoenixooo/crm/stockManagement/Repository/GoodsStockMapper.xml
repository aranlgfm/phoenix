<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cafe24.phoenixooo.crm.stockManagement.Repository.GoodsStockMapper">
	<!-- 미용용품 입고 등록 처리 -->
	<insert id="insertGoodsStock" parameterType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsStock">
		<selectKey resultType="hashmap" keyProperty="stockCode" order="BEFORE">
			select 
				if(isnull(STOCK_CD)
				,'CRM_GOODS_STOCK_1'
				, concat('CRM_GOODS_STOCK_', MAX(CONVERT(SUBSTRING(STOCK_CD,17), UNSIGNED))+1)) as stockCode
			from 
				CRM_GOODS_STOCK_TB
		</selectKey>
		INSERT INTO 
			CRM_GOODS_STOCK_TB
		(
			STOCK_CD
			,ACCOUNT_CD
			, SHOP_CD
			, EMPLOYEE_CD
			, GOODS_CD
			, STOCK_DT
			, GOODS_QUANTITY_NO
		)
		VALUES 
		(
			#{stockCode}
			, (select ACCOUNT_CD from CRM_ACCOUNT_TB where SHOP_CD=#{shopCode} and ACCOUNT_NM=#{accountName})
			, #{shopCode}
			, (select EMPLOYEE_CD from CRM_EMPLOYEE_TB where SHOP_CD=#{shopCode} and EMPLOYEE_NM=#{employeeName})
			, (select GOODS_CD from CRM_GOODS_TB where SHOP_CD=#{shopCode} and GOODS_NM=#{goodsName})
			, NOW()
			, #{goodsQuantityNumber}
		)		
	</insert>
	
	<!-- 입고내역 가져오기 -->
	<select id="selectGoodsStockList" parameterType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsStock" resultType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsStock">
		SELECT
			STOCK_CD as stockCode 
			,STOCK_DT as stockDate
			,ACCOUNT_NM as accountName
			,GOODS_NM as goodsName
			,EMPLOYEE_NM as employeeName
			,BUYING_GOODS_UNIT_WON as buyingGoodsUnitWon
			,GOODS_QUANTITY_NO as goodsQuantityNumber
		FROM 
			CRM_GOODS_STOCK_TB as goodsStock
		inner JOIN 
			CRM_ACCOUNT_TB as account
		ON 
			goodsStock.ACCOUNT_CD=account.ACCOUNT_CD
		inner join
			CRM_GOODS_TB as goods
		on
			goodsStock.GOODS_CD=goods.GOODS_CD
		inner join
			CRM_EMPLOYEE_TB as employee
		on
			goodsStock.EMPLOYEE_CD=employee.EMPLOYEE_CD
		where 
			goodsStock.SHOP_CD=(select USER_SHOP_CD from COM_USER_TB as user where user.USER_CD=#{userCode})		
	</select>
	
	<!-- 입고된 것 결제 등록 처리 -->
	<insert id="insertGoodsPayment" parameterType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsPayment">
		<selectKey resultType="hashmap" keyProperty="paymentCode" order="BEFORE">
			select 
				if(isnull(PAYMENT_CD)
				,'CRM_GOODS_PAYMENT_1'
				, concat('CRM_GOODS_PAYMENT_', MAX(CONVERT(SUBSTRING(PAYMENT_CD,19), UNSIGNED))+1)) as paymentCode
			from 
				CRM_GOODS_PAYMENT_TB
		</selectKey>	
		
		INSERT INTO 
			CRM_GOODS_PAYMENT_TB
			(
				PAYMENT_CD
				, STOCK_CD
				, PAYMENT_DT
				, EMPLOYEE_NM
				, PAYMENT_MEMO
			)
		VALUES 
			(
				#{paymentCode}
				, #{stockCode}
				, NOW()
				, #{employeeName}
				, #{paymentMemo}
			)		
	</insert>
	
	<!-- 입고된 것  삭제 처리 -->
	<delete id="deleteGoodsStock" parameterType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsStock">
		DELETE FROM 
			CRM_GOODS_STOCK_TB 
		WHERE 
			STOCK_CD=#{stockCode}		
	</delete>
	
	<!-- 입고된 거 수정 처리 -->
	<!-- shopCode는 session에서 꺼내온다고 생각하자 -->
	<update id="updateGoodsStock" parameterType="com.cafe24.phoenixooo.crm.stockManagement.Model.GoodsStock">
		UPDATE 
			CRM_GOODS_STOCK_TB
		SET
			ACCOUNT_CD=(select ACCOUNT_CD from CRM_ACCOUNT_TB where SHOP_CD=#{shopCode} and ACCOUNT_NM=#{accountName})
			,SHOP_CD=#{shopCode}
			,EMPLOYEE_CD=(select EMPLOYEE_CD from CRM_EMPLOYEE_TB where SHOP_CD=#{shopCode} and EMPLOYEE_NM=#{employeeName})
			,GOODS_CD=(select GOODS_CD from CRM_GOODS_TB where SHOP_CD=#{shopCode} and GOODS_NM=#{goodsName})
			,GOODS_QUANTITY_NO=#{goodsQuantityNumber}
		WHERE 
			STOCK_CD=#{stockCode}		
	</update>
</mapper>































